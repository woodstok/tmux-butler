#!/usr/bin/env bash

printhelp() {
   >&2 echo '
quetty - a tokenizer/filter
filters the input and outputs filtered strings/tokens based on the options provided.

Usage: quetty [options]...
options can be Inbuilt tokens or a Custom user defined filters.
Multiple filters can be specified. The same input will be passed through each filter separately. 
The output is combined from each filter, unique lines with minimum characters are printed to stdout.

Basic Options
  -min NUM
        If a filtered string has <NUM characters, it wont be displayed.
        Default 4
  -regex REGEX
        Custom regex to be added as a filter. Multiple regex arguments can be specified. 
        The regex is passed to egrep -o to do the filtering. Therefore, the regex syntax supported 
        is the egrep REGEX syntax. If the regex becomes sufficiently complex,
        consider using a custom filter as specified below

Inbuilt tokenizers/filters
  -hash
        Tokenize hash values
  -ip
        Tokenize ip addresses
  -nospace
        Tokenize all nonspace tokens
  -num
        Tokenize basic numbers
  -word
        Tokenize basic words(w+)
Custom filters
  -<custom> 
        If a file named <custom> exists in $SCRIPTDIR/filters directory,
        the file will be used as a custom script that takes in stdin and 
        does custom processing and outputs a filtered custom list.
  -path
        Filters out filesystem path like strings from the input
  -quote
        Filters out single quoted and double quoted strings
  -line
        Match entire line

EXAMPLES
  quetty -path -num
          Displays only path like strings and numbers from the input
  quetty -regex "a\w*"
          Displays only strings that start with an a
  quetty -quote
          Uses the filters/quote custom filter defined to display only
          single quoted and double quoted strings from the input.
  The pre-defined custom filters are simple shell scripts to be used as as an example
  for more complex tokenizers
    '
}

ROOTDIR="$( cd "$(dirname "$0")/.." >/dev/null 2>&1 ; pwd -P )"

# Regex Definitions
WORDREGEX='\w+'
IDENTREGEX='[A-Za-z]+([_-][A-Za-z0-9]+)*[A-Za-z0-9]*'
IDENTREGEXWITHDOT='[A-Za-z]+([._-][A-Za-z0-9]+)*[A-Za-z0-9]*'
NOSPACEREGEX='\S+'
NUMREGEX='[0-9]+'

## technically all numbers match a basic hashregex
## but let us only match hashes that has
## atleast one alphabet in it
HASHREGEX='(([a-f0-9]*[a-f][a-f0-9]*)|([A-F0-9]*[A-F][A-F0-9]*))\b'

IPV4REGEX='[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
IPV6REGEX='[a-fA-F0-9]+:[a-fA-F0-9:]{2,}'
IPCOMBINED="(("$IPV4REGEX")|("$IPV6REGEX"))"
PREFIXCOMBINED="(("$IPV4REGEX")|("$IPV6REGEX"))(/[0-9]{1,3})?"

REGEXLIST=()
FILTERLIST=()
minchars=4

# add each -r arg to REGEXLIST
while (( "$#" )); do
  case "$1" in
    -regex)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        REGEXLIST+=($2)
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -min)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        minchars=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -word)
        REGEXLIST+=($WORDREGEX)
        REGEXLIST+=($IDENTREGEX)
        REGEXLIST+=($IDENTREGEXWITHDOT)
      shift
      ;;
    -num)
        REGEXLIST+=($NUMREGEX)
        shift
        ;;
    -hash)
        REGEXLIST+=($HASHREGEX)
      shift
      ;;
    -nospace)
        REGEXLIST+=($NOSPACEREGEX)
      shift
      ;;
    -ip)
        REGEXLIST+=($IPCOMBINED)
        REGEXLIST+=($PREFIXCOMBINED)
      shift
      ;;
    -h|--help)
      printhelp
      exit 0
      ;;
    -*) 
        filter=${1#"-"}
        filter_file=$ROOTDIR/filters/"$filter"
        if [[ ! -x $filter_file ]]
        then
                echo "Error: No filter $filter_file"
                exit 1
        fi
        FILTERLIST+=($filter_file)
        shift
      ;;
   *)
     echo "Invalid Option: $1" 1>&2
     printhelp
     exit 1
     ;;
  esac
done


inpfile="${BUTLERTMPDIR:-/tmp}/quetty-input-file"
tmpfile="${BUTLERTMPDIR:-/tmp}/quetty-tmp-file"
cleanup() {
  rm -f $inpfile $tmpfile
}
[[ -z $BUTLERDEBUG ]] && trap 'cleanup' EXIT

rm -f $tmpfile
touch $tmpfile
cat > $inpfile


# Read input to tmp file for reuse
for reg in "${REGEXLIST[@]}"
do
        cat $inpfile | egrep -o $reg >> $tmpfile
done
for tkner in "${FILTERLIST[@]}"
do
        cat $inpfile | $tkner >> $tmpfile
done

# Sort and uniq the output
cat $tmpfile | egrep -o ".{$minchars,}" | sort | uniq | shuf
